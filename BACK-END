// ============================================================================
// UAE CAR DEALERSHIP PLATFORM - COMPLETE BACKEND IMPLEMENTATION
// ============================================================================

// ===========================
// 1. PACKAGE.JSON
// ===========================

{
  "name": "uae-car-deals-backend",
  "version": "1.0.0",
  "description": "Backend API for UAE Car Dealership Offers Platform",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.5.0",
    "bcryptjs": "^2.4.3",
    "jsonwebtoken": "^9.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express-validator": "^7.0.1",
    "express-rate-limit": "^6.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  },
  "keywords": ["uae", "cars", "dealership", "offers", "api"],
  "author": "UAE Car Deals Team",
  "license": "MIT"
}

// ===========================
// 2. SERVER.JS (Main Entry Point)
// ===========================

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const authRoutes = require('./routes/auth');
const offerRoutes = require('./routes/offers');
const { errorHandler } = require('./middleware/errorHandler');

const app = express();

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  message: 'Too many requests from this IP, please try again later.'
});

// Middleware
app.use(limiter);
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:3000',
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/offers', offerRoutes);

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'UAE Car Deals API is running',
    timestamp: new Date().toISOString()
  });
});

// Error handling middleware
app.use(errorHandler);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({ message: 'Route not found' });
});

// Database connection
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('✅ Connected to MongoDB'))
.catch(err => console.error('❌ MongoDB connection error:', err));

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on port ${PORT}`);
});

// ===========================
// 3. MODELS/USER.JS
// ===========================

const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = new mongoose.Schema({
  email: {
    type: String,
    required: [true, 'Email is required'],
    unique: true,
    lowercase: true,
    validate: {
      validator: function(email) {
        // RFC compliant email validation
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      },
      message: 'Please provide a valid email address'
    }
  },
  phone: {
    type: String,
    required: [true, 'Phone number is required'],
    validate: {
      validator: function(phone) {
        // UAE phone validation: 9715XXXXXXXX or 0X-XXXXXXX
        const cleaned = phone.replace(/[\s\-\+]/g, '');
        const mobilePattern = /^9715\d{8}$/;
        const landlinePattern = /^0[2-9]\d{7}$/;
        return mobilePattern.test(cleaned) || landlinePattern.test(cleaned);
      },
      message: 'Please provide a valid UAE phone number (9715XXXXXXXX or 0X-XXXXXXX)'
    }
  },
  password: {
    type: String,
    required: [true, 'Password is required'],
    minlength: [6, 'Password must be at least 6 characters long']
  },
  role: {
    type: String,
    enum: ['user', 'admin'],
    default: 'user'
  },
  firstName: {
    type: String,
    required: [true, 'First name is required'],
    trim: true
  },
  lastName: {
    type: String,
    required: [true, 'Last name is required'],
    trim: true
  },
  emirate: {
    type: String,
    enum: ['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'],
    required: [true, 'Emirate is required']
  },
  isVerified: {
    type: Boolean,
    default: false
  },
  lastLogin: {
    type: Date,
    default: Date.now
  }
}, {
  timestamps: true
});

// Hash password before saving
userSchema.pre('save', async function(next) {
  if (!this.isModified('password')) return next();
  
  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error) {
    next(error);
  }
});

// Compare password method
userSchema.methods.comparePassword = async function(candidatePassword) {
  return bcrypt.compare(candidatePassword, this.password);
};

// Remove password from JSON output
userSchema.methods.toJSON = function() {
  const userObject = this.toObject();
  delete userObject.password;
  return userObject;
};

module.exports = mongoose.model('User', userSchema);

// ===========================
// 4. MODELS/OFFER.JS
// ===========================

const mongoose = require('mongoose');

const offerSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Offer title is required'],
    trim: true,
    maxlength: [200, 'Title cannot exceed 200 characters']
  },
  description: {
    type: String,
    required: [true, 'Description is required'],
    maxlength: [2000, 'Description cannot exceed 2000 characters']
  },
  brand: {
    type: String,
    required: [true, 'Car brand is required'],
    enum: ['BMW', 'Mercedes', 'Toyota', 'Audi', 'Lexus', 'Nissan', 'Honda', 'Ford', 'Hyundai', 'Kia', 'Volkswagen', 'Chevrolet']
  },
  emirate: {
    type: String,
    required: [true, 'Emirate is required'],
    enum: ['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain']
  },
  imageUrl: {
    type: String,
    required: [true, 'Image URL is required'],
    validate: {
      validator: function(url) {
        return /^https?:\/\/.+/.test(url);
      },
      message: 'Please provide a valid image URL'
    }
  },
  dealership: {
    name: {
      type: String,
      required: [true, 'Dealership name is required'],
      trim: true
    },
    phone: {
      type: String,
      required: [true, 'Dealership phone is required'],
      validate: {
        validator: function(phone) {
          const cleaned = phone.replace(/[\s\-\+]/g, '');
          const mobilePattern = /^9715\d{8}$/;
          const landlinePattern = /^0[2-9]\d{7}$/;
          return mobilePattern.test(cleaned) || landlinePattern.test(cleaned);
        },
        message: 'Please provide a valid UAE phone number'
      }
    },
    location: {
      type: String,
      required: [true, 'Location is required']
    },
    locationLink: {
      type: String,
      validate: {
        validator: function(url) {
          return !url || /^https?:\/\/.+/.test(url);
        },
        message: 'Please provide a valid location URL'
      }
    }
  },
  startDate: {
    type: Date,
    required: [true, 'Start date is required'],
    default: Date.now
  },
  endDate: {
    type: Date,
    required: [true, 'End date is required'],
    validate: {
      validator: function(endDate) {
        return endDate > this.startDate;
      },
      message: 'End date must be after start date'
    }
  },
  isActive: {
    type: Boolean,
    default: true
  },
  views: {
    type: Number,
    default: 0
  },
  contacts: {
    type: Number,
    default: 0
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  }
}, {
  timestamps: true
});

// Index for efficient querying
offerSchema.index({ brand: 1, emirate: 1, endDate: 1 });
offerSchema.index({ endDate: 1 });

// Virtual for checking if offer is expired
offerSchema.virtual('isExpired').get(function() {
  return new Date() > this.endDate;
});

// Middleware to auto-deactivate expired offers
offerSchema.pre('find', function() {
  this.where({ endDate: { $gt: new Date() } });
});

offerSchema.pre('findOne', function() {
  this.where({ endDate: { $gt: new Date() } });
});

module.exports = mongoose.model('Offer', offerSchema);

// ===========================
// 5. MIDDLEWARE/AUTH.JS
// ===========================

const jwt = require('jsonwebtoken');
const User = require('../models/User');

const auth = async (req, res, next) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ message: 'No token provided, authorization denied' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);
    
    if (!user) {
      return res.status(401).json({ message: 'Token is not valid' });
    }

    req.user = user;
    next();
  } catch (error) {
    console.error('Auth middleware error:', error);
    res.status(401).json({ message: 'Token is not valid' });
  }
};

const adminAuth = async (req, res, next) => {
  auth(req, res, () => {
    if (req.user.role !== 'admin') {
      return res.status(403).json({ message: 'Access denied. Admin privileges required.' });
    }
    next();
  });
};

module.exports = { auth, adminAuth };

// ===========================
// 6. MIDDLEWARE/ERRORHANDLER.JS
// ===========================

const errorHandler = (err, req, res, next) => {
  console.error('Error:', err);

  // Mongoose validation error
  if (err.name === 'ValidationError') {
    const errors = Object.values(err.errors).map(e => e.message);
    return res.status(400).json({ 
      message: 'Validation Error', 
      errors 
    });
  }

  // Mongoose duplicate key error
  if (err.code === 11000) {
    const field = Object.keys(err.keyPattern)[0];
    return res.status(400).json({ 
      message: `${field} already exists` 
    });
  }

  // JWT errors
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({ message: 'Invalid token' });
  }

  if (err.name === 'TokenExpiredError') {
    return res.status(401).json({ message: 'Token expired' });
  }

  // Default server error
  res.status(500).json({ 
    message: 'Internal server error',
    error: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'
  });
};

module.exports = { errorHandler };

// ===========================
// 7. ROUTES/AUTH.JS
// ===========================

const express = require('express');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const { auth } = require('../middleware/auth');

const router = express.Router();

// Generate JWT token
const generateToken = (userId) => {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, { expiresIn: '7d' });
};

// @route   POST /api/auth/signup
// @desc    Register a new user
// @access  Public
router.post('/signup', [
  body('email').isEmail().normalizeEmail(),
  body('phone').notEmpty().withMessage('Phone number is required'),
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),
  body('firstName').notEmpty().trim().withMessage('First name is required'),
  body('lastName').notEmpty().trim().withMessage('Last name is required'),
  body('emirate').isIn(['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain'])
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, phone, password, firstName, lastName, emirate } = req.body;

    // Check if user already exists
    const existingUser = await User.findOne({ 
      $or: [{ email }, { phone }] 
    });

    if (existingUser) {
      return res.status(400).json({ 
        message: 'User already exists with this email or phone number' 
      });
    }

    // Create new user
    const user = new User({
      email,
      phone,
      password,
      firstName,
      lastName,
      emirate
    });

    await user.save();

    // Generate token
    const token = generateToken(user._id);

    res.status(201).json({
      message: 'User registered successfully',
      token,
      user: user.toJSON()
    });
  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ message: 'Server error during registration' });
  }
});

// @route   POST /api/auth/login
// @desc    Login user
// @access  Public
router.post('/login', [
  body('email').isEmail().normalizeEmail(),
  body('password').notEmpty().withMessage('Password is required')
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { email, password } = req.body;

    // Find user by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Check password
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    // Update last login
    user.lastLogin = new Date();
    await user.save();

    // Generate token
    const token = generateToken(user._id);

    res.json({
      message: 'Login successful',
      token,
      user: user.toJSON()
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Server error during login' });
  }
});

// @route   GET /api/auth/me
// @desc    Get current user
// @access  Private
router.get('/me', auth, async (req, res) => {
  try {
    res.json({ user: req.user.toJSON() });
  } catch (error) {
    console.error('Get user error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;

// ===========================
// 8. ROUTES/OFFERS.JS
// ===========================

const express = require('express');
const { body, validationResult, query } = require('express-validator');
const Offer = require('../models/Offer');
const { auth, adminAuth } = require('../middleware/auth');

const router = express.Router();

// @route   GET /api/offers
// @desc    Get all active offers
// @access  Public
router.get('/', [
  query('brand').optional().isIn(['BMW', 'Mercedes', 'Toyota', 'Audi', 'Lexus', 'Nissan', 'Honda', 'Ford', 'Hyundai', 'Kia', 'Volkswagen', 'Chevrolet']),
  query('emirate').optional().isIn(['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain']),
  query('limit').optional().isInt({ min: 1, max: 100 }),
  query('page').optional().isInt({ min: 1 })
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { brand, emirate, limit = 20, page = 1 } = req.query;
    const skip = (page - 1) * limit;

    // Build filter object
    const filter = { 
      isActive: true,
      endDate: { $gt: new Date() }
    };

    if (brand) filter.brand = brand;
    if (emirate) filter.emirate = emirate;

    // Get offers with pagination
    const offers = await Offer.find(filter)
      .populate('createdBy', 'firstName lastName')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Offer.countDocuments(filter);

    res.json({
      offers,
      pagination: {
        current: parseInt(page),
        pages: Math.ceil(total / limit),
        total
      }
    });
  } catch (error) {
    console.error('Get offers error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   POST /api/offers/filter
// @desc    Filter offers by multiple criteria
// @access  Public
router.post('/filter', [
  body('brands').optional().isArray(),
  body('emirates').optional().isArray(),
  body('search').optional().isString()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { brands, emirates, search } = req.body;

    // Build filter object
    const filter = { 
      isActive: true,
      endDate: { $gt: new Date() }
    };

    if (brands && brands.length > 0) {
      filter.brand = { $in: brands };
    }

    if (emirates && emirates.length > 0) {
      filter.emirate = { $in: emirates };
    }

    if (search) {
      filter.$or = [
        { title: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } },
        { 'dealership.name': { $regex: search, $options: 'i' } }
      ];
    }

    const offers = await Offer.find(filter)
      .populate('createdBy', 'firstName lastName')
      .sort({ createdAt: -1 });

    res.json({ offers });
  } catch (error) {
    console.error('Filter offers error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   GET /api/offers/:id
// @desc    Get single offer and increment view count
// @access  Public
router.get('/:id', async (req, res) => {
  try {
    const offer = await Offer.findById(req.params.id)
      .populate('createdBy', 'firstName lastName');

    if (!offer) {
      return res.status(404).json({ message: 'Offer not found' });
    }

    // Increment view count
    offer.views += 1;
    await offer.save();

    res.json({ offer });
  } catch (error) {
    console.error('Get offer error:', error);
    if (error.name === 'CastError') {
      return res.status(404).json({ message: 'Offer not found' });
    }
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   POST /api/offers/create
// @desc    Create new offer (Admin only)
// @access  Private/Admin
router.post('/create', adminAuth, [
  body('title').notEmpty().trim().isLength({ max: 200 }),
  body('description').notEmpty().isLength({ max: 2000 }),
  body('brand').isIn(['BMW', 'Mercedes', 'Toyota', 'Audi', 'Lexus', 'Nissan', 'Honda', 'Ford', 'Hyundai', 'Kia', 'Volkswagen', 'Chevrolet']),
  body('emirate').isIn(['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain']),
  body('imageUrl').isURL(),
  body('dealership.name').notEmpty().trim(),
  body('dealership.phone').notEmpty(),
  body('dealership.location').notEmpty(),
  body('endDate').isISO8601()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const offerData = {
      ...req.body,
      createdBy: req.user._id
    };

    const offer = new Offer(offerData);
    await offer.save();

    const populatedOffer = await Offer.findById(offer._id)
      .populate('createdBy', 'firstName lastName');

    res.status(201).json({
      message: 'Offer created successfully',
      offer: populatedOffer
    });
  } catch (error) {
    console.error('Create offer error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   PUT /api/offers/:id
// @desc    Update offer (Admin only)
// @access  Private/Admin
router.put('/:id', adminAuth, [
  body('title').optional().trim().isLength({ max: 200 }),
  body('description').optional().isLength({ max: 2000 }),
  body('brand').optional().isIn(['BMW', 'Mercedes', 'Toyota', 'Audi', 'Lexus', 'Nissan', 'Honda', 'Ford', 'Hyundai', 'Kia', 'Volkswagen', 'Chevrolet']),
  body('emirate').optional().isIn(['Dubai', 'Abu Dhabi', 'Sharjah', 'Ajman', 'Ras Al Khaimah', 'Fujairah', 'Umm Al Quwain']),
  body('imageUrl').optional().isURL(),
  body('endDate').optional().isISO8601()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const offer = await Offer.findById(req.params.id);
    if (!offer) {
      return res.status(404).json({ message: 'Offer not found' });
    }

    // Update offer
    Object.keys(req.body).forEach(key => {
      if (req.body[key] !== undefined) {
        offer[key] = req.body[key];
      }
    });

    await offer.save();

    const updatedOffer = await Offer.findById(offer._id)
      .populate('createdBy', 'firstName lastName');

    res.json({
      message: 'Offer updated successfully',
      offer: updatedOffer
    });
  } catch (error) {
    console.error('Update offer error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   DELETE /api/offers/:id
// @desc    Delete offer (Admin only)
// @access  Private/Admin
router.delete('/:id', adminAuth, async (req, res) => {
  try {
    const offer = await Offer.findById(req.params.id);
    if (!offer) {
      return res.status(404).json({ message: 'Offer not found' });
    }

    await Offer.findByIdAndDelete(req.params.id);

    res.json({ message: 'Offer deleted successfully' });
  } catch (error) {
    console.error('Delete offer error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

// @route   POST /api/offers/:id/contact
// @desc    Track contact interaction
// @access  Public
router.post('/:id/contact', async (req, res) => {
  try {
    const offer = await Offer.findById(req.params.id);
    if (!offer) {
      return res.status(404).json({ message: 'Offer not found' });
    }

    // Increment contact count
    offer.contacts += 1;
    await offer.save();

    res.json({ message: 'Contact tracked successfully' });
  } catch (error) {
    console.error('Track contact error:', error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;

// ===========================
// 9. .ENV.EXAMPLE
// ===========================

# Database
MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/uae-car-deals?retryWrites=true&w=majority

# JWT Secret (generate a secure random string)
JWT_SECRET=your-super-secure-jwt-secret-key-here-make-it-long-and-random

# Server Configuration
NODE_ENV=production
PORT=5000

# Frontend URL (for CORS)
FRONTEND_URL=https://your-frontend-domain.vercel.app

# Optional: Rate limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

// ===========================
// 10. DEPLOYMENT SCRIPTS
// ===========================

// Create these scripts in your backend folder:

// start.sh
#!/bin/bash
echo "Starting UAE Car Deals API..."
npm install
npm start

// dev.sh  
#!/bin/bash
echo "Starting development server..."
npm install
npm run dev
